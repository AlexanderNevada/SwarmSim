
function u_best = controller_greedy(proxmity_filter_i,line_vel_i,rotate_vel_i,line_vels_j,rotate_vels_j,value_i,pose_i,theta_i,poses_j,thetas_j,sample_time,distance,lambda,c,p,target_w,goal,simConst)
    %% build cost function and solve with greedy
     Cost_function = @(x)proxmity_filter_i(1)*(norm((pose_i - poses_j(1) + sample_time*(line_vel_i+x(1)*sample_time).* [cos(theta_i+rotate_vel_i*sample_time+x(2)*sample_time);sin(theta_i+rotate_vel_i*sample_time+x(2)*sample_time)] ...
     - sample_time*(line_vels_j(1)).*[cos(thetas_j(1)+rotate_vels_j(1)*sample_time);sin(thetas_j(1)+rotate_vels_j(1)*sample_time)]))-distance)^2 ...
     +proxmity_filter_i(2)*(norm((pose_i - poses_j(2) + sample_time*(line_vel_i+x(1)*sample_time).* [cos(theta_i+rotate_vel_i*sample_time+x(2)*sample_time);sin(theta_i+rotate_vel_i*sample_time+x(2)*sample_time)] ...
     - sample_time*(line_vels_j(2)).*[cos(thetas_j(2)+rotate_vels_j(2)*sample_time);sin(thetas_j(2)+rotate_vels_j(2)*sample_time)]))-distance)^2 ...
     +proxmity_filter_i(3)*(norm((pose_i - poses_j(3) + sample_time*(line_vel_i+x(1)*sample_time).* [cos(theta_i+rotate_vel_i*sample_time+x(2)*sample_time);sin(theta_i+rotate_vel_i*sample_time+x(2)*sample_time)] ...
     - sample_time*(line_vels_j(3)).*[cos(thetas_j(3)+rotate_vels_j(3)*sample_time);sin(thetas_j(3)+rotate_vels_j(3)*sample_time)]))-distance)^2 ...
     +proxmity_filter_i(4)*(norm((pose_i - poses_j(4) + sample_time*(line_vel_i+x(1)*sample_time).* [cos(theta_i+rotate_vel_i*sample_time+x(2)*sample_time);sin(theta_i+rotate_vel_i*sample_time+x(2)*sample_time)] ...
     - sample_time*(line_vels_j(4)).*[cos(thetas_j(4)+rotate_vels_j(4)*sample_time);sin(thetas_j(4)+rotate_vels_j(4)*sample_time)]))-distance)^2 ...  % distance control
     +p*(value_i*proxmity_filter_i(1)*(norm((pose_i - poses_j(1) + sample_time*(line_vel_i+x(1)*sample_time).* [cos(theta_i+rotate_vel_i*sample_time+x(2)*sample_time);sin(theta_i+rotate_vel_i*sample_time+x(2)*sample_time)] ...
     - sample_time*(line_vels_j(1)).*[cos(thetas_j(1)+rotate_vels_j(1)*sample_time);sin(thetas_j(1)+rotate_vels_j(1)*sample_time)]))) ...
     + value_i*proxmity_filter_i(2)*(norm((pose_i - poses_j(2) + sample_time*(line_vel_i+x(1)*sample_time).* [cos(theta_i+rotate_vel_i*sample_time+x(2)*sample_time);sin(theta_i+rotate_vel_i*sample_time+x(2)*sample_time)] ...
     - sample_time*(line_vels_j(2)).*[cos(thetas_j(2)+rotate_vels_j(2)*sample_time);sin(thetas_j(2)+rotate_vels_j(2)*sample_time)]))) ...
     + value_i*proxmity_filter_i(3)*(norm((pose_i - poses_j(3) + sample_time*(line_vel_i+x(1)*sample_time).* [cos(theta_i+rotate_vel_i*sample_time+x(2)*sample_time);sin(theta_i+rotate_vel_i*sample_time+x(2)*sample_time)] ...
     - sample_time*(line_vels_j(3)).*[cos(thetas_j(3)+rotate_vels_j(3)*sample_time);sin(thetas_j(3)+rotate_vels_j(3)*sample_time)]))) ...
     + value_i*proxmity_filter_i(4)*(norm((pose_i - poses_j(4) + sample_time*(line_vel_i+x(1)*sample_time).* [cos(theta_i+rotate_vel_i*sample_time+x(2)*sample_time);sin(theta_i+rotate_vel_i*sample_time+x(2)*sample_time)] ...
     - sample_time*(line_vels_j(4)).*[cos(thetas_j(4)+rotate_vels_j(4)*sample_time);sin(thetas_j(4)+rotate_vels_j(4)*sample_time)])))) ...  % protection high value 
     + c*(proxmity_filter_i(1)*(line_vel_i-line_vels_j(1))^2 + proxmity_filter_i(2)*(line_vel_i-line_vels_j(2))^2 + proxmity_filter_i(3)*(line_vel_i-line_vels_j(3))^2 + proxmity_filter_i(4)*(line_vel_i-line_vels_j(4))^2) ... 
     + target_w*norm((pose_i - goal + sample_time*(line_vel_i+x(1)*sample_time).* [cos(theta_i+rotate_vel_i*sample_time+x(2)*sample_time);sin(theta_i+rotate_vel_i*sample_time+x(2)*sample_time)])) ...
     + lambda*norm(x);
     x0 = [1,1];
     A = [1,0;-1,0;0,1;0,-1;sample_time,0;-sample_time,0;0,sample_time;0,-sample_time];
     b = [simConst.max_a_l;-simConst.min_a_l;simConst.max_a_r;-simConst.min_a_r;simConst.max_v_l-line_vel_i;-simConst.min_v_l+line_vel_i;1-rotate_vel_i;1+rotate_vel_i];
     
     [u_best,fval] = fmincon(Cost_function,x0,A,b);

end


